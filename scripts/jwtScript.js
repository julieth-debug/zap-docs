function logger(){print("["+this["zap.script.name"]+"] "+arguments[0])}function sendingRequest(e,t){if(t===HttpSender.AUTHENTICATION_INITIATOR)return logger("Trying to auth"),e;var r=ScriptVars.getGlobalVar("jwt-token");if(r){var a=(e.getRequestHeader(),new HtmlParameter(COOKIE_TYPE,"token",r));return e.getRequestHeader().getCookieParams().add(a),logger("Added authorization token "+r.slice(0,20)+" ... "),e.getRequestHeader().setHeader("Authorization","Bearer "+r),e}}function responseReceived(e,t){var r=e.getResponseBody().toString(),a=e.getResponseHeader();if(t!==HttpSender.AUTHENTICATION_INITIATOR){var o=ScriptVars.getGlobalVar("jwt-token");if(!o)return;var n=e.getRequestHeader(),i=n.getCookieParams(),s=new HtmlParameter(COOKIE_TYPE,"token",o);if(i.contains(s))return;return void e.getResponseHeader().setHeader("Set-Cookie","token="+o+"; Path=/;")}if(logger("Handling auth response"),a.getStatusCode()>299)return void logger("Auth failed");if("{"===r[0]){try{var p=JSON.parse(r)}catch(e){return}if(p.authentication){var o=p.authentication.token;logger("Capturing token for JWT\n"+o),ScriptVars.setGlobalVar("jwt-token",o),e.getResponseHeader().setHeader("Set-Cookie","token="+o+"; Path=/;")}}}var HttpSender=Java.type("org.parosproxy.paros.network.HttpSender"),ScriptVars=Java.type("org.zaproxy.zap.extension.script.ScriptVars"),HtmlParameter=Java.type("org.parosproxy.paros.network.HtmlParameter"),COOKIE_TYPE=org.parosproxy.paros.network.HtmlParameter.Type.cookie;